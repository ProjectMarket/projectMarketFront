var minify = (function(undefined) {
    'use strict';

    var shell = require('shelljs'),
            fs = require('fs'),
            glob = require('glob'),
            path = require('path');

    shell.config.silent = true;

    var version = function(options) {
        this.file = options.file;

        this.modifyVersion();
    };
    version.prototype = version.fn = {
        file: null,
        modifyVersion: function() {
            shell.sed('-i', /^(\s*const\s+(?:CSSTS|JSTS)\s+=\s+)[^;]+/mg, "$1'" + date + "'", this.file);
            if (shell.error()) {
                console.log('Impossible de mettre à jour le fichier "' + this.file + '" : ' + shell.error());
            } else {
                console.log('Le fichier "' + this.file + '" a été mis à jour');
            }
        }
    };

    var minify = function(options) {
        this.type = options.type;
        this.language = options.language || null;

        if (typeof options.fileIn === 'object' && options.fileIn instanceof Array) {
            this.fileIn = [];
            for (var x in options.fileIn) {
                if (options.fileIn[x].indexOf('*') > -1) {
                    options.fileIn[x] = glob.sync((typeof options.publicFolder === 'string' ? options.publicFolder : '') + options.fileIn[x], null);
                    for (var y in options.fileIn[x]) {
                        this.fileIn.push(options.fileIn[x][y]);
                    }
                } else {
                    this.fileIn.push((typeof options.publicFolder === 'string' ? options.publicFolder : '') + options.fileIn[x]);
                }
            }
        } else if (options.fileIn.indexOf('*') > -1) {
            this.fileIn = glob.sync((typeof options.publicFolder === 'string' ? options.publicFolder : '') + options.fileIn, null);
        } else {
            this.fileIn = [(typeof options.publicFolder === 'string' ? options.publicFolder : '') + options.fileIn];
        }

        this.fileOut = options.fileOut;
        this.options = options.options || [];
        this.singly = options.singly || false;

        if (typeof options.callback !== 'undefined') {
            this.callback = options.callback;
        }

        this.compress();
    };

    minify.prototype = minify.fn = {
        type: null,
        fileIn: null,
        fileOut: null,
        callback: null,
        singly: false,
        compress: function() {
            var self = this, command;
            var platform = require('os').platform();
            var prefix = (platform === 'win32') ? 'node ' : '';

            var files = [];
            if (this.singly) {
                var name, ext;
                for (var x in this.fileIn) {
                    ext = path.extname(this.fileIn[x]);
                    name = path.basename(this.fileIn[x], ext);
                    if (path.extname(name) !== '.min') {
                        files.push({
                            fileIn: [this.fileIn[x]],
                            fileOut: path.join(this.fileOut || path.dirname(this.fileIn[x]), name + '.min' + ext)
                        });
                    }
                }
            } else {
                files.push({
                    fileIn: this.fileIn,
                    fileOut: this.fileOut
                });
            }

            for (var x in files) {
                switch (this.type) {
                    case 'gcc':
                        var fileInCommand = files[x].fileIn.map(function(file) {
                            return '--js="' + file + '"';
                        });
                        command = 'java -server -XX:+TieredCompilation -jar -Xss2048k "' + __dirname + '/google_closure_compiler-v20130411.jar" ' + fileInCommand.join(' ') + ' --language_in=' + (this.language || 'ECMASCRIPT3') + ' --js_output_file="' + files[x].fileOut + '" ' + this.options.join(' ');
                        break;
                    case 'clean-css':
                        command = prefix + '"' + __dirname + '/../../clean-css/bin/cleancss" "' + files[x].fileIn.join('" "') + '" -o "' + files[x].fileOut + '" ' + this.options.join(' ');
                        break;
                    case 'no-compress':
                        var os = fs.createWriteStream(files[x].fileOut);
                        var is = fs.createReadStream(files[x].fileIn);
                        is.pipe(os);
                        command = '';
                        break;
                }

                var result = shell.exec(command, {silent: true});
                if (self.callback) {
                    if (result.code === 0) {
                        self.callback(null, files[x].fileIn, files[x].fileOut);
                    } else {
                        self.callback(result.output, files[x].fileIn, files[x].fileOut);
                    }
                }
            }
        }
    };

    return minify;
})();

var versioning = (function(undefined) {
    'use strict';

    var shell = require('shelljs');
    var strftime = require('strftime');
    var path = require('path');

    shell.config.silent = true;

    var versioning = function(options) {
        this.versionFile = options.versionFile;
        this.filenames = options.filenames;
        this.version = options.version || strftime('%Y%m%d%H%M%S');
        this.removeOld = options.removeOld || false;

        this.modifyVersion();
    };
    versioning.prototype = versioning.fn = {
        versionFile: null,
        filenames: null,
        version: null,
        removeOld: false,
        modifyVersion: function() {
            shell.sed('-i', /^(\s*const\s+(?:CSSTS|JSTS)\s+=\s+)[^;]+/mg, "$1'" + this.version + "'", this.versionFile);
            if (shell.error()) {
                console.log('Impossible de mettre à jour la version du fichier "' + this.versionFile + '" : ' + shell.error());
            } else {
                console.log('La version du fichier "' + this.versionFile + '" a été mise à jour');
            }

            for (var x in this.filenames) {
                var filename = this.filenames[x],
                        ext = path.extname(filename),
                        name = path.basename(filename, ext),
                        dir = path.dirname(filename);
                var newFilename = path.join(dir, name + '-' + this.version + ext);
                var oldFilenames = path.join(dir, name + '-*' + ext)
                shell.rm('-f', oldFilenames);
                if (shell.error()) {
                    console.log('Impossible de supprimer les anciens fichiers "' + oldFilenames + '" : ' + shell.error());
                } else {
                    console.log('Les anciens fichiers "' + oldFilenames + '" ont bien été supprimés');
                }
                shell.mv('-f', filename, newFilename);
                if (shell.error()) {
                    console.log('Impossible de renommer le fichier "' + filename + '" : ' + shell.error());
                } else {
                    console.log('Le numéro de version "' + this.version + '" a bien ajouté au fichier "' + filename + '"');
                }
            }
        }
    };

    return versioning;
})();

exports.version = '1.0.0';
exports.minify = minify;
exports.versioning = versioning;