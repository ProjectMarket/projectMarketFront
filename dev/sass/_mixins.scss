@mixin vendor-property($property, $value) { 
  @each $vendor in ('-moz-', '-webkit-', '-o-', '-ms-', '') {
    #{$vendor}#{$property}: #{$value};
  }
}

@mixin vendor-value($property, $value) { 
  @each $vendor in ('-moz-', '-webkit-', '-o-', '-ms-', '') {
    #{$property}: #{$vendor}#{$value};
  }
}

@mixin vendor($property, $value) { 
  @each $vendor in ('-moz-', '-webkit-', '-o-', '-ms-', '') {
    #{$vendor}#{$property}: #{$vendor}#{$value};
  }
}

@mixin vendor-keyframes($name) {
  @-moz-keyframes #{$name} { @content; }
  @-webkit-keyframes #{$name} { @content; }
  @-o-keyframes #{$name} { @content; }
  @-ms-keyframes #{$name} { @content; }
  @keyframes #{$name} { @content; }
}

@mixin rotate($degrees) {
  $degrees: $degrees * 1deg;
  @include vendor-property('transform', 'rotate(#{$degrees})');

  filter:  progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=#{-1*sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)});
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=#{cos($degrees)}, M12=#{-1*sin($degrees)}, M21=#{sin($degrees)}, M22=#{cos($degrees)})";
  zoom: 1;
}

@mixin flip($direction) {
  @if $direction == 'horizontal' {
    @include vendor-property('transform', 'scaleY(-1)');

    filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1);
    -ms-filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1);
  }
  @else if $direction == 'vertical' {
    @include vendor-property('transform', 'scaleX(-1)');

    filter: progid:DXImageTransform.Microsoft.BasicImage(mirror=1);
    -ms-filter: progid:DXImageTransform.Microsoft.BasicImage(mirror=1);
  }
}

@mixin font-face($family, $type, $version, $weight: null, $style: null, $exts: woff ttf) {
  $src: null;
  $name: '#{$family} #{$type}';
  $file: str-replace($name, ' ', '-');

  $formats: (
    otf: "opentype",
    svg: "svg",
    ttf: "truetype",
    woff: "woff",
    woff2: "woff2"
    );

  $src: if($type == 'Regular', local(quote($family)), append(local(quote($name)), local(quote($file)), comma));

  @each $ext in $exts {
    $hash: '';
    @if $ext == 'svg' {
      $hash: "#" + $file;
    }
    $url: '#{$pm-fonts-path}#{$family}/#{$file}.#{$ext}?v=#{$version}' + $hash;
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($url)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($family);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}